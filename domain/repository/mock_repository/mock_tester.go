// Code generated by MockGen. DO NOT EDIT.
// Source: tester.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tester "github.com/quantum-box/skillforest_platform/go/services/test/domain/entity/tester"
)

// MockTesterRepository is a mock of TesterRepository interface.
type MockTesterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTesterRepositoryMockRecorder
}

// MockTesterRepositoryMockRecorder is the mock recorder for MockTesterRepository.
type MockTesterRepositoryMockRecorder struct {
	mock *MockTesterRepository
}

// NewMockTesterRepository creates a new mock instance.
func NewMockTesterRepository(ctrl *gomock.Controller) *MockTesterRepository {
	mock := &MockTesterRepository{ctrl: ctrl}
	mock.recorder = &MockTesterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTesterRepository) EXPECT() *MockTesterRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTesterRepository) Create(arg0 context.Context, arg1 *tester.Tester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTesterRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTesterRepository)(nil).Create), arg0, arg1)
}
