// Code generated by MockGen. DO NOT EDIT.
// Source: source.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	source "github.com/quantum-box/skillforest_platform/go/services/test/domain/entity/source"
)

// MockSourceRepository is a mock of SourceRepository interface.
type MockSourceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSourceRepositoryMockRecorder
}

// MockSourceRepositoryMockRecorder is the mock recorder for MockSourceRepository.
type MockSourceRepositoryMockRecorder struct {
	mock *MockSourceRepository
}

// NewMockSourceRepository creates a new mock instance.
func NewMockSourceRepository(ctrl *gomock.Controller) *MockSourceRepository {
	mock := &MockSourceRepository{ctrl: ctrl}
	mock.recorder = &MockSourceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceRepository) EXPECT() *MockSourceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSourceRepository) Create(arg0 context.Context, arg1 *source.Source) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSourceRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSourceRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockSourceRepository) Delete(arg0 context.Context, arg1 source.SourceID) (*source.SourceID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*source.SourceID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSourceRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSourceRepository)(nil).Delete), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockSourceRepository) FindAll(arg0 context.Context) ([]*source.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].([]*source.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockSourceRepositoryMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockSourceRepository)(nil).FindAll), arg0)
}

// FindById mocks base method.
func (m *MockSourceRepository) FindById(arg0 context.Context, arg1 source.SourceID) (*source.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0, arg1)
	ret0, _ := ret[0].(*source.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockSourceRepositoryMockRecorder) FindById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockSourceRepository)(nil).FindById), arg0, arg1)
}

// Update mocks base method.
func (m *MockSourceRepository) Update(arg0 context.Context, arg1 *source.Source) (*source.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*source.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSourceRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSourceRepository)(nil).Update), arg0, arg1)
}
