// Code generated by MockGen. DO NOT EDIT.
// Source: paper.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	paper "github.com/quantum-box/skillforest_platform/go/services/test/domain/entity/paper"
)

// MockPaperRepository is a mock of PaperRepository interface.
type MockPaperRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaperRepositoryMockRecorder
}

// MockPaperRepositoryMockRecorder is the mock recorder for MockPaperRepository.
type MockPaperRepositoryMockRecorder struct {
	mock *MockPaperRepository
}

// NewMockPaperRepository creates a new mock instance.
func NewMockPaperRepository(ctrl *gomock.Controller) *MockPaperRepository {
	mock := &MockPaperRepository{ctrl: ctrl}
	mock.recorder = &MockPaperRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaperRepository) EXPECT() *MockPaperRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPaperRepository) Create(arg0 context.Context, arg1 *paper.Paper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPaperRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaperRepository)(nil).Create), arg0, arg1)
}

// GetById mocks base method.
func (m *MockPaperRepository) GetById(arg0 context.Context, arg1 *paper.PaperID) (*paper.Paper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*paper.Paper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockPaperRepositoryMockRecorder) GetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockPaperRepository)(nil).GetById), arg0, arg1)
}

// Update mocks base method.
func (m *MockPaperRepository) Update(arg0 context.Context, arg1 *paper.Paper) (*paper.Paper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*paper.Paper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPaperRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPaperRepository)(nil).Update), arg0, arg1)
}
